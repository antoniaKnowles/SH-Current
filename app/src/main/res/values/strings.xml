<resources>
    <string name="app_name">My Application</string>
    <string name="action_settings">Settings</string>
    <!-- Strings used for fragments for navigation -->
    <string name="Main_fragment_label">Main Fragment</string>
    <string name="first_fragment_label">First Fragment</string>
    <string name="second_fragment_label">Second Fragment</string>
    <string name="next">Next</string>
    <string name="previous">Previous</string>

    <string name="hello_first_fragment">Hello first fragment</string>
    <string name="hello_second_fragment">Hello second fragment. Arg: %1$s</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>

    <string name="incorrect">incorrect</string>

    <string name="incorrectStatement">Incorrect Answer</string>
    <string name="incorrectStatement2">The Correct Answer is </string>
    <string name="large_text">
        "Material is the metaphor.\n\n

        "A material metaphor is the unifying theory of a rationalized space and a system of motion."
        "The material is grounded in tactile reality, inspired by the study of paper and ink, yet "
        "technologically advanced and open to imagination and magic.\n"
        "Surfaces and edges of the material provide visual cues that are grounded in reality. The "
        "use of familiar tactile attributes helps users quickly understand affordances. Yet the "
        "flexibility of the material creates new affordances that supercede those in the physical "
        "world, without breaking the rules of physics.\n"
        "The fundamentals of light, surface, and movement are key to conveying how objects move, "
        "interact, and exist in space and in relation to each other. Realistic lighting shows "
        "seams, divides space, and indicates moving parts.\n\n"

        "Bold, graphic, intentional.\n\n"

        "The foundational elements of print based design typography, grids, space, scale, color, "
        "and use of imagery guide visual treatments. These elements do far more than please the "
        "eye. They create hierarchy, meaning, and focus. Deliberate color choices, edge to edge "
        "imagery, large scale typography, and intentional white space create a bold and graphic "
        "interface that immerse the user in the experience.\n"
        "An emphasis on user actions makes core functionality immediately apparent and provides "
        "waypoints for the user.\n\n"

        "Motion provides meaning.\n\n"

        "Motion respects and reinforces the user as the prime mover. Primary user actions are "
        "inflection points that initiate motion, transforming the whole design.\n"
        "All action takes place in a single environment. Objects are presented to the user without "
        "breaking the continuity of experience even as they transform and reorganize.\n"
        "Motion is meaningful and appropriate, serving to focus attention and maintain continuity. "
        "Feedback is subtle yet clear. Transitions are efﬁcient yet coherent.\n\n"

        "3D world.\n\n"

        "The material environment is a 3D space, which means all objects have x, y, and z "
        "dimensions. The z-axis is perpendicularly aligned to the plane of the display, with the "
        "positive z-axis extending towards the viewer. Every sheet of material occupies a single "
        "position along the z-axis and has a standard 1dp thickness.\n"
        "On the web, the z-axis is used for layering and not for perspective. The 3D world is "
        "emulated by manipulating the y-axis.\n\n"

        "Light and shadow.\n\n"

        "Within the material environment, virtual lights illuminate the scene. Key lights create "
        "directional shadows, while ambient light creates soft shadows from all angles.\n"
        "Shadows in the material environment are cast by these two light sources. In Android "
        "development, shadows occur when light sources are blocked by sheets of material at "
        "various positions along the z-axis. On the web, shadows are depicted by manipulating the "
        "y-axis only. The following example shows the card with a height of 6dp.\n\n"

        "Resting elevation.\n\n"

        "All material objects, regardless of size, have a resting elevation, or default elevation "
        "that does not change. If an object changes elevation, it should return to its resting "
        "elevation as soon as possible.\n\n"

        "Component elevations.\n\n"

        "The resting elevation for a component type is consistent across apps (e.g., FAB elevation "
        "does not vary from 6dp in one app to 16dp in another app).\n"
        "Components may have different resting elevations across platforms, depending on the depth "
        "of the environment (e.g., TV has a greater depth than mobile or desktop).\n\n"

        "Responsive elevation and dynamic elevation offsets.\n\n"

        "Some component types have responsive elevation, meaning they change elevation in response "
        "to user input (e.g., normal, focused, and pressed) or system events. These elevation "
        "changes are consistently implemented using dynamic elevation offsets.\n"
        "Dynamic elevation offsets are the goal elevation that a component moves towards, relative "
        "to the component’s resting state. They ensure that elevation changes are consistent "
        "across actions and component types. For example, all components that lift on press have "
        "the same elevation change relative to their resting elevation.\n"
        "Once the input event is completed or cancelled, the component will return to its resting "
        "elevation.\n\n"

        "Avoiding elevation interference.\n\n"

        "Components with responsive elevations may encounter other components as they move between "
        "their resting elevations and dynamic elevation offsets. Because material cannot pass "
        "through other material, components avoid interfering with one another any number of ways, "
        "whether on a per component basis or using the entire app layout.\n"
        "On a component level, components can move or be removed before they cause interference. "
        "For example, a floating action button (FAB) can disappear or move off screen before a "
        "user picks up a card, or it can move if a snackbar appears.\n"
        "On the layout level, design your app layout to minimize opportunities for interference. "
        "For example, position the FAB to one side of stream of a cards so the FAB won’t interfere "
        "when a user tries to pick up one of cards.\n\n"
    </string>

    <string name="Variable">
    "Variables\n\n

        "A variable is an object used to store information in java, such as name and level. These variables"
        "have to be given a type so the program knows how to store the variable and how they should interact.\n"
        "To use a variable, it must first be declared .All lines of code which do not end with {} must end with ;\n\n"

        "Integer is any whole number, e.g. 7, 97, 3748, 0 \n"
        "int id = 987;\n\n"

        "Float is any decimal number such as 5.3 or 0.753785\n"
"float score = 5.6f;\n"
"All numbers must have a f behind it when first declares\n\n"

"Boolean is a variable that holds only true or false as a value\n "
"boolean user = true;\n\n"

"Char is a single character such as a,b or c \n"
"char FirstInitial = 'K';\n"
"all char values have to be in '…'\n\n"

"A String is a combination of Char's. Strings can also represent numbers; however, no numerical"
        "operations can be made without its transformation back to type Integer.\n"
"String name = "bob";\n"
"all string values have to be in "…"\n\n"



     </string>
    <string name="Symbols">
    "Operators \n\n"
        "Operators are symbols that can interact with variables.\n"
        "All these symbols interact with variables of type int or float\n\n"
        "Basic mathematical symbols\n"
"+ Addition\n"
"- Subtraction\n"
"* Multiplication \n"
"/ Division \n"
"> Greater Than \n"
"	&#60;Less Than \n"
    "> Greater Than/Equal Too \n"
"	&#60;Less Than/Equal Too\n\n"

    "Can be used in many data type contex\n"
   " = equal too for seting on values\n"
"! not \n"
"!= not equal too\n"
".equals() if two stings are equal \n"
"== equal comparison comparisons \n\n"

"Most commonly used in for loops\n"
"++ Increment\n"
"— Decrement\n"
"Example\n"
"i++\n"
"is the equivalent too i = i+1\n\n"

"More commonly used in conditions in loops in next level\n"
"|| or\n"
"	&#38;	&#38; and\n"
"Example\n"
"( i &#60;4)	&#38;	&#38;!(i=2) \n"
"So it is only true on the values 0,1 and 3\n\n"


    </string>

<string name="Loops"><![CDATA[
    "Conditional Statements \n\n"
"Conditions are variables interacting with the operations.Such as x==5 or a>b\n\n"



"System.out.println(variable); - is the code required to print out a statement to the terminal which can contain\n\n"


"While loops are used when there is code needing to run along as the condition is true,"
" while loops should contain an element that interacts with what is in the condition so that the loop will eventually end\n"
"while(condition){\n"
".....\n"
"}\n\n\n"

"Example\n\n"

"while(i>7){\n"
"total = total +i;\n"
"i—;\n"
"}\n\n\n"

"For loops are repeated for a set number of times, there can be defined in a unique condition"
" statement of three parts, an example of which is (int i = 0; i]]><<![CDATA[=10;i++) in this"
 " condition, the variable i is declared and set to zero; then for each time the code is running,"
 " i is incremented upwards(i=i+1) while i is less than or equal to 10.when it meets this condition the loop will stop.\n\n"
"Example\n\n"

"for(int i = 10;i>=0;i—){\n"
"System.out.print("Countdown" + i);\n"
"}\n"

"In the example, the variable i is declared as an integer of 10, then for each loop while i is still "
"more significant than or equal to 0, i decrements (i = i-1).\n\n\n"


"Break\n\n"
"switch statement does not contain a condition. Instead, it uses a value such as a variable."
 "Then it uses cases for the possible value of the variable. This can be used if there is a complex.\n"

"Break is a statement that is required for switch, as demonstrated.\n\n"
"Example\n\n"


"switch (level) {\n"
"  case 5:\n"
"    System.out.println("Welcome to level 5");\n"
"    break;\n"
"  case 4:\n"
"    System.out.println("Welcome to level 4");\n"
"    break;\n"
"case 3:\n"
"    System.out.println("Welcome to level 3");\n"
"    break;\n"
"  default:\n"
"    System.out.println("No level selected");\n"
"}\n\n"


"break can also be used in other situations\n"

"Example\n\n"
"while (i>2){\n"
"if(i==5){\n"
"break;\n"
"}\n"
"i++;\n"
"}\n\n\n"

"if-else statement is used in the context of if a condition is true, then do a, and if the condition is false, do b\n\n"
    "Example\n\n"
"if (condition){\n"
"a\n"
"}else {\n"
"b\n"
"}\n"


]]></string>

    <string name="Arrays">

       " Arrays hold collections of variables of the same type.\n"
"They can be declared as \n"
"String[] names;\n\n"
"Values can be added to arrays by either;\n"
"int[] scores = {12, 9, 8, 4};\n"
"or \n"
"int[4] scores = 8;\n"
"This puts the value eight into the array at position 4.\n"
       " Key information to know about the positions in arrays is that they start at 0."
        "So if adding or removing from an array, the first value is 0.\n\n"

"To get the size of arrays which is how many values are in the array by;\n"
".length\n\n\n"

"Example \n"
"int TotalScores = 0;\n"
"    for(int j = 0; j&#60;scores.length;j++){\n"
"         TotalScores = TotalScores + scores[j];\n"
"}\n"
"This can also be writen as \n"
"   int TotalScores = 0;\n"
"   for(int j: scores){\n"
"          TotalScores = TotalScores + j;\n"
"   }\n\n	"

"Arrays can not only contain variables from one type. It can also contain arrays. For example; \n"

"Student 1's grades English A French B History A\n"
"Student 2's grades English C French C History A\n"
"Student 3's grades English D French B History C\n\n"

"char[][] classGrades = {{'a','b','a'},{'c','c','a'},{'d','b','c'}};\n\n"

"So to retrieve  Student 3's grade in English \n"
"char french = grades[2][0];\n"
"This occurs with the first number representing the student placement and the second representing"
        " the second array's grade placement. These numbers may seem first incorrect, but it is essential"
        " to remember that the array begins at 0\n"


</string>

    <string name="Structure">

        "Classes are separate pages of the program, which can all be connected to the main class. This is done to improve the code's readability as the variables can be used more efficiently by only being present when required. Each class is made up of smaller parts; these are called Methods.\n"


"Methods are created in java as small functions of the program in which everyone does something different. They have the option to return a value or complete an operation.\n\n"

"Example\n"
"public String exampleName(String firstName, String  lastName) {\n"
"...................\n"
"return name;\n"
"}\n"
"Where firstName and lastName are parameters, which are variables that are passed into the method from elsewhere when the method is called, there's are not required and can be any type.\n\n"

"The method name can be anything that best describes the method; combining the parameters and the method name makes it unique.\n"

""public" is a type of modifier. Modifiers define access to the method (access modifiers) or other functionality(non-access modifiers).\n\n"
"Access Modifiers:\n"
"-Public -accessible for all\n"
"-Private - accessible for only current class\n\n"

"Non-Access Modifiers:\n"
"-final-  methods and classes, value can not be changed elsewhere\n"
"-static - just methods mean that it can be used freely in another class\n"
"-abstract -discussed in higher level\n\n"

"When the access control is not defined, "void" can be used or in conjunction with other modifiers. It is also used when creating a main method for a class.\n\n"

"The String in this example is the return type; this means that the program expects this method to return a string. This can be replaced with any type. Otherwise, void can be used, representing the method is not expected to return anything.\n"

"Example\n"

"String fullName = exampleName(firstName,lastName);\n"
"This is a eample of a method being called which returns a string and saves it to fullName.\n\n"

"For methods with no return value can be called with simply;\n"
"exampleAge();\n\n"

"This can be done elsewhere in the same class or even in the method called itself. This is called Recursion.\n"

"Example\n"
"This is an example of a program that will count down from 10 to 1\n"

"public class RecursionExample {\n"

"      static int stopCountdown = 1; //stopCountdown is declared and initlised\n"
"      static int count=10;  //count is declared and initlised\n"

" public static void main(String[] args) {  //main method is created\n"
"            countdown();  //calls the check method\n"
"     }

"      public static void countdown(){\n"
"            System.out.println("In "+count + "!");  //Displays a message "In (count)!"\n"
"             count--;  //decreases the number in count\n"
"              if(count>stopCountdown){  // checks that count is still higher than where it has to stop\n"
"                          countdown();  //recursion occurs by it calling itself\n"
"               }\n"
"        }\n"
"}\n\n"

"One of the essential logical steps above is that the variables are global, meaning that both stopCountdown and count are outwith the methods. Meaning that all methods can use them, and they are not re-set if there is a recursive call by a method that would happen if they were local.\n"

"When discussing variable, there are two scopes in a class, meaning where they can be used. Local variables are those declared within a method-so can only be used within that letter. Global variables are that can be accessed by all methods.\n"

"Above, we can see an example of the main method; this is required in the classes, so the program knows where to begin. It is public, so it can be accessed everywhere and is always called main. The parameter, in this case, is different as it is taking in the args value from the command line, which is the line used to run in the terminal.\n"


"How can you join the classes to use a  method or a variable from class A in class B?\n"
"The way to approach this by creating an object. This creates an instance of the class(A) in a new class(B)  or the same class(A). For the new class(B), you can access methods in the original classes(A). If it is in the same class(A), you can access attributes of variables.\n"

"Example Objects - Attributes\n"

"In Class A\n"
"    ClassAname objectA = new ClassAname();\n"

"This can then be used;\n"
"-To get a variable from object A\n"

"String newString = objectA.stringA;\n"

"-To change the variable in object A\n"

"objectA.stringA =253;\n"
"To avoid this from happening final can be used\n"
"final String  stringA = 100;\n"

"The reason we have objects that are useful is that you can have more than one object, so you can change one without affecting the other.\n"

"Example Objects - Methods\n"

"The other way to use objects is by creating an instance of another class in that class to use the methods in that class.\n"

"In Class A\n"
"    ClassBname objectB = new ClassBname();\n"

"-To call a method from object B\n"
"objectB.methodName();\n"
"or\n"
"objectB.methodName(String name);//if require parameter\n"

"-If method in B returns value\n"
"String varableReturned = objectB.methodName();\n"

"To interact with a variable of class B\n"

"Wanting to move variable from class B to A,\n"
"Firstly create in class B\n"

"public String getName(){\n"
"        return varableName;\n"
"}\n\n"


"Secondly, in class A\n"

"String nameB = objectB.getName();\n\n\n"

"Wanting to change a variable in class B from A\n\n"
"Firstly create in class B\n"

"public void setAge(int ageA){\n"
"   ageB = ageA;\n"
"}\n\n"


"Secondly, in class A\n"

"int age = 5;\n"
"objectB.setAge(age);\n\n"

"The first parts in both these steps can only be done if it is public or static. \n"

</string>


    <!-- Strings related to login -->
    <string name="prompt_email">Email</string>
    <string name="prompt_password">Password</string>
    <string name="action_sign_in">Sign in or register</string>
    <string name="action_sign_in_short">Sign in</string>
    <string name="welcome">"Welcome!"</string>
    <string name="invalid_username">Not a valid username</string>
    <string name="invalid_password">Password must be >5 characters</string>
    <string name="login_failed">"Login failed"</string>
    <string name="level_1">Level 1</string>


</resources>